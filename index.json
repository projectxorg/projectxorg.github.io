[
{
	"uri": "/getting-started/",
	"title": "Getting started",
	"tags": [],
	"description": "",
	"content": "Requirements Install Kodi for your OS\n Installation Installation instructions.\n Configuration TODO\n Downloads \n Updating Update instructions.\n "
},
{
	"uri": "/burst/create/",
	"title": "How to add provider",
	"tags": [],
	"description": "",
	"content": "Preparation Each provider consists of a definition in definitions.json file in /burst/providers/ folder and an icon in /burst/providers/icons/ folder.\nIcon is optional, but very much desired. It is easier to quickly find relevant search result, when you visually differ providers.\nIf you want to try adding new provider, the workflow is about that:\n Fork Github repository from https://github.com/elgatito/script.elementum.burst Clone the Github repository: git clone git@github.com:yourusername/script.elementum.burst.git Change the branch from master to anything else like git checkout -b my_provider Do your changes to definitions.json Push changes to Github with git push origin my_provider Github will give you a note that you can make a Pull Request, so your changes are included in the Burst code. Done!   Please, try not to make changes in the Python code of Burst.\n  If you feel you have no other option - run flake8 before you commit.\n  It will do basic syntax and code checks. Should run without errors.\n Definition Definitions are a JSON list of a smaller parts, each of them describes separate providers. There are no inherited settings, or default settings, each provider\u0026rsquo;s setting should be explicitly setted.\nExample of provider definition:\n\u0026#34;ilcorsaroblu\u0026#34;: { \u0026#34;enabled\u0026#34;: true, \u0026#34;predefined\u0026#34;: false, \u0026#34;private\u0026#34;: false, \u0026#34;name\u0026#34;: \u0026#34;Il Corsaro Blu\u0026#34;, \u0026#34;languages\u0026#34;: \u0026#34;it\u0026#34;, \u0026#34;anime_extra\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;anime_keywords\u0026#34;: \u0026#34;{title:original} {episode}\u0026#34;, \u0026#34;anime_query\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;base_url\u0026#34;: \u0026#34;https://www.ilcorsaroblu.org/index.php?page=torrents\u0026amp;search=QUERYEXTRA\u0026amp;x=0\u0026amp;y=0\u0026#34;, \u0026#34;color\u0026#34;: \u0026#34;FFFFFFFF\u0026#34;, \u0026#34;general_extra\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;general_keywords\u0026#34;: \u0026#34;{title:original}\u0026#34;, \u0026#34;general_query\u0026#34;: \u0026#34;0\u0026#34;, \u0026#34;language\u0026#34;: null, \u0026#34;login_failed\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;login_object\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;login_path\u0026#34;: null, \u0026#34;movie_extra\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;movie_keywords\u0026#34;: \u0026#34;{title:original} {year}\u0026#34;, \u0026#34;movie_query\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;parser\u0026#34;: { \u0026#34;row\u0026#34;: \u0026#34;find_once(tag=\u0026#39;table\u0026#39;, select=(\u0026#39;class\u0026#39;, \u0026#39;lista\u0026#39;), order=4).find_all(\u0026#39;tr\u0026#39;)\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;item(tag=\u0026#39;td\u0026#39;, order=2)\u0026#34;, \u0026#34;seeds\u0026#34;: \u0026#34;item(tag=\u0026#39;td\u0026#39;, order=7)\u0026#34;, \u0026#34;peers\u0026#34;: \u0026#34;item(tag=\u0026#39;td\u0026#39;, order=6)\u0026#34;, \u0026#34;size\u0026#34;: \u0026#34;item(tag=\u0026#39;td\u0026#39;, order=9)\u0026#34;, \u0026#34;torrent\u0026#34;: \u0026#34;\u0026#39;https://www.ilcorsaroblu.org/%s\u0026#39; % item(tag=\u0026#39;a\u0026#39;, attribute=\u0026#39;href\u0026#39;, order=3)\u0026#34; }, \u0026#34;season_extra\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;season_extra2\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;season_keywords\u0026#34;: \u0026#34;{title:original} Season_{season}\u0026#34;, \u0026#34;season_keywords2\u0026#34;: \u0026#34;{title:original} Season{season}\u0026#34;, \u0026#34;season_query\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;separator\u0026#34;: \u0026#34;%20\u0026#34;, \u0026#34;show_query\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;subpage\u0026#34;: true, \u0026#34;tv_extra\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;tv_extra2\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;tv_keywords\u0026#34;: \u0026#34;{title:original} s{season:2}e{episode:2}\u0026#34;, \u0026#34;tv_keywords2\u0026#34;: \u0026#34;{title:original} s{season:2}\u0026#34; } This part is very important:\n\u0026#34;enabled\u0026#34;: true, \u0026#34;predefined\u0026#34;: false, \u0026#34;private\u0026#34;: false, \u0026#34;name\u0026#34;: \u0026#34;Il Corsaro Blu\u0026#34;, \u0026#34;languages\u0026#34;: \u0026#34;it\u0026#34;, Where columns mean:\n enabled: boolean, defines if provider is available (not selected to search, but available for selection). predefined: boolean, defines if provider is enabled by default upon installation of Burst (default providers). private: boolean, defines if provider is private, so login should be executed. name: string, name of provider, no special characters, name will be shown in Kodi settings and search results. languages: string, languages used on the tracker, 2-char codes list of languages (like it, fr, en, es), can be ommited. anime_extra: string, text, later replaced into EXTRA keyword in search url. anime_keywords: string, query for anime searches. anime_query: string, part of url, added to base_url. base_url: string, URL, used for further uses in searches. color: string, Kodi color code. Can be substituted with word representation. See: https://s3.amazonaws.com/f.cl.ly/items/1A3S2n0l103n460Y1I0e/chart.jpg . general_extra: string, text, later replaced into EXTRA keyword in search url. general_keywords: string, query for general searches (when you type the query). general_query: string, part of url, added to base_url. language: string, 2-char language definition, which language is used to searches. login_failed: string, text to search, to identify we failed with loggin (or better a unique text that indicates we are not logged in). login_object: string, object to use for logging in. USERNAME and PASSWORD are substituted. login_path: string, url, used to POST login object to. movie_extra: string, text, later replaced into EXTRA keyword in search url. movie_keywords: string, query for movie searches. movie_query: string, part of url, added to base_url. parser: array, defines how to parse result page.  row: query searches for rows, each of them will be parsed for torrent information. name: query for torrent name. seeds: query for seeds count. peers: query for peers count. size: query for torrent size. torrent: query for torrent file link or magnet link.   season_extra: string, text, later replaced into EXTRA keyword in search url. season_extra2: string, text, later replaced into EXTRA keyword in search url. season_keywords: string, query for season searches. season_keywords2: string, query for season searches. season_query: string, part of url, added to base_url. separator: string, chars, used to separate words in the query (like %20 or -). show_query: string, string that is added to the base_url for episodes searches. subpage: boolean, defines if provider needs a separate request to get parser-\u0026gt;torrent link and find magnet/torrent there. tv_extra: string, text, later replaced into EXTRA keyword in search url. tv_extra2: string, text, later replaced into EXTRA keyword in search url. tv_keywords: string, query for episode searches. tv_keywords2: string, query for episode searches.  Icon Icon requirements are pretty easy:\n 256x256 size Transparent background PNG format  Place it with provider_id.png file name and it will be used everywhere.\nParsing rules Our parser is ehp.py, it\u0026rsquo;s not an XPath parser, but it gives you fine speed and is pretty fault-tolerant to broken html code.\nProject code: https://github.com/iogf/ehp\nYou can see examples in existing definitions. Basically you will need:\n find_once if you need to fine one item; find_all if you need a list of results (like rows); item if you need something specific (like name or specific link).  Debugging Kodi Locations can be discovered here: https://kodi.wiki/view/Log_file/Advanced#Location\nPython Code You can copy your cloned git repository into Kodi path and just run search from Kodi, it will use the new code without need to restart Kodi. So you can easily run and track results.\nIn Linux it\u0026rsquo;s something like:\ncp -rf /path/to/your/repo/* ~/.kodi/addons/script.elementum.burst/\nParser Then, if you also want to debug the parser, you can enable excessive debugging:\nBurst Kodi settings -\u0026gt; Advanced -\u0026gt; Log debug messages for parsing\nYou will see what parser rule we run, and what we match.\nEnabling providers Added provider is not enabled for searching by default, you have to enable it in Kodi settings. So you can run ./scripts/generate_settings.py to regenerate settings.xml file, then copy it to Kodi and restart Kodi (settings.xml are read on load or addon installation only).\nOnly custom providers (not provided with Burst) are enabled by default and you cannon enable or disable them.\n"
},
{
	"uri": "/getting-started/installation/",
	"title": "Installation",
	"tags": [],
	"description": "",
	"content": "Installation instructions.\nInstallation Installation is simple!\n  Enable remote controls in Kodi.\n Enter Kodi Service settings  Enable both remote controls  It is needed to operate properly, to run library update, for example, or sync the library or add repository, and other usefull things.     Download zip file for your platform here: Platforms. It is highly recommended to use the \u0026ldquo;All-in-one\u0026rdquo; package, it will detect your platform automatically.    Install addon from zip.\n  Plugin will be ready to use.   Configuration Follow instructions here\n"
},
{
	"uri": "/getting-started/configuration/",
	"title": "Configuration",
	"tags": [],
	"description": "",
	"content": "TODO\nTo be added later\n"
},
{
	"uri": "/contribute/",
	"title": "Contribute",
	"tags": [],
	"description": "",
	"content": "Requirements Install Kodi for your OS\n Feature Request \n Report an Issue \n Making a log file \n "
},
{
	"uri": "/contribute/request-feature/",
	"title": "Feature Request",
	"tags": [],
	"description": "",
	"content": "Where to go  There are separate places for reporting an issue:  For Elementum addon: https://github.com/elgatito/plugin.video.elementum/issues For Burst: https://github.com/elgatito/script.elementum.burst/issues For Context addon: https://github.com/elgatito/context.elementum/issues For Elementum binary part of addon: https://github.com/elgatito/elementum/issues For this website: https://github.com/elgatito/elementum-surge/issues    Posting a request Nothing special.\n Choose appropriate repository (For Elementum addon, for Burst, for Context addin, for website) Create an issue. Be very descriptive to understand your wish and how you see it. "
},
{
	"uri": "/burst/override/",
	"title": "How to override provider",
	"tags": [],
	"description": "",
	"content": "Ways There are few ways to override some provider or add one locally.\nLocations can be discovered here: https://kodi.wiki/view/Log_file/Advanced#Location\nAdding custom provider from json file You can add json files into USERDATA/addon_data/script.elementum.burst/providers/, each of them should contains provider description.\nUSERDATA directory can be discovered here: https://kodi.wiki/view/Log_file/Advanced#Location Provider description syntax can be found here: How to add provider\nBe aware, that those providers are enabled by default! Kodi does not let making flexible addon settings, they are static.\nOverriding provider definition with Python script Another way to override provider definition is the Python script. It should be an overrides.py file in your USERDATA/addon_data/script.elementum.burst/ directory.\nAnd it should look like this:\noverrides = { \u0026#39;torlock\u0026#39;: { \u0026#39;name\u0026#39;: \u0026#39;MyTorLock\u0026#39; }, \u0026#39;freshon.tv\u0026#39;: { \u0026#39;tv_keywords\u0026#39;: \u0026#39;{title} s{season:2}e{episode:2}\u0026#39; } } Overriding provider definition with JSON file The simpliest way to override provider definitions is the unified Json file. It is the overrides.json file in USERDATA/addon_data/script.elementum.burst/ directory.\nShould look like this:\n{ \u0026#34;rutor\u0026#34;: { \u0026#34;name\u0026#34;: \u0026#34;Bla-bla\u0026#34;, \u0026#34;color\u0026#34;: \u0026#34;red\u0026#34; }, \u0026#34;yts\u0026#34;: { \u0026#34;parser\u0026#34;: { \u0026#34;name\u0026#34;: \u0026#34;item(\u0026#39;a\u0026#39;, order=2)\u0026#34; } } } You can open actual definitions, located here: https://raw.githubusercontent.com/elgatito/script.elementum.burst/master/burst/providers/providers.json\nFind the one you need, copy into overrides.json file, and make you modifications.\nOr leave only modified columns, to see what you change.\n"
},
{
	"uri": "/contribute/report-issue/",
	"title": "Report an Issue",
	"tags": [],
	"description": "",
	"content": "Where to go  There are separate places for reporting an issue:  For Elementum addon: https://github.com/elgatito/plugin.video.elementum/issues For Burst: https://github.com/elgatito/script.elementum.burst/issues For Context addon: https://github.com/elgatito/context.elementum/issues For Elementum binary part of addon: https://github.com/elgatito/elementum/issues For this website: https://github.com/elgatito/elementum-surge/issues    Posting an issue Before posting an issue, prepare a log file, taken, after you reproduce the bug. Follow instructions here\nPlease, always, provide a log file if you encounter a bug, even if you think if is obvious to you. Sometimes it is useful to make a screenshot of a bug, or even a screencast, if addon acts strange in your understanding.\n"
},
{
	"uri": "/burst/",
	"title": "Burst addon",
	"tags": [],
	"description": "",
	"content": "About Elementum.Burst is a fork of a Quasar.Burst plugin, that gives you ability to search different providers and find streams, according to the query.\n"
},
{
	"uri": "/getting-started/platforms-page/",
	"title": "Downloads",
	"tags": [],
	"description": "",
	"content": "Elementum Downloads  It is always better to use \u0026ldquo;All-on-one\u0026rdquo; zip file to install, it includes all the platforms!\n  .platform-os { } .platform-name { } .platform-assets { } .platform-asset { }  \nUniversal  All-in-one   \nClient  Client   \nAndroid  arm arm64 x64 x86   \nOSx  x64 x86   \nLinux  arm64 armv6 armv7 x64 x86   \nWindows  x64 x86    Burst Downloads  .platform-os { } .platform-name { } .platform-assets { } .platform-asset { }  \nUniversal  All-in-one    Context Helper Downloads  .platform-os { } .platform-name { } .platform-assets { } .platform-asset { }  \nUniversal  All-in-one   "
},
{
	"uri": "/contribute/log/",
	"title": "Making a log file",
	"tags": [],
	"description": "",
	"content": "About Log file in Kodi is a kodi.log file, located in temporary directory. Location of that directory depends on the platform, and even on the same platform it can differ. Locations can be discovered here: https://kodi.wiki/view/Log_file/Advanced#Location\nPreparation First of all, log file, by default, contains only limited records, only errors or some notable actions, but, to understand the cause of an issue, we need full log. So we need to enable debugging in Kodi.\n Enter Kodi System settings  Enable Expert level of settings  Enable event logging  That is it! But you probably won\u0026rsquo;t like the onscreen information about CPU usage and so on. So you can create an advancedsettings.xml file in Kodi\u0026rsquo;s Userdata folder (https://kodi.wiki/view/Userdata), which this content:  \u0026lt;?xml version=\u0026#34;1.0\u0026#34; ?\u0026gt; \u0026lt;advancedsettings\u0026gt; \u0026lt;loglevel\u0026gt;2\u0026lt;/loglevel\u0026gt; \u0026lt;debug\u0026gt; \u0026lt;extralogging\u0026gt;true\u0026lt;/extralogging\u0026gt; \u0026lt;showloginfo\u0026gt;false\u0026lt;/showloginfo\u0026gt; \u0026lt;/debug\u0026gt; \u0026lt;/advancedsettings\u0026gt; It will enable logging and hide onscreen information.   Now your Kodi records everything into the log file!  What we have Elementum has few HTTP links which can give you more information about torrenting status, system information, some timers of common operations (which are way too useful for developers!):\n /debug/bundle will give you all the debug information + kodi.log file included. So it\u0026rsquo;s the fullest log file, and is what we\u0026rsquo;d expect from you to find the problem. /debug/all contains all the debug information, without kodi.log, so it\u0026rsquo;s all about the system and torrent engine, but not Kodi.  To find proper link:\n Enter Elementum addon, open Status  In the table you can see the address, that can be opened from other devices (in case you Kodi runs on a separate device in the network)   Two ways of taking a log file: Easy one If your Elementum starts fine, so you can enter it, browse for something, then you can try this way, if not, please, browse for the Hard one.\nThere is bundled functionality to upload your /debug/bundle or /debug/all logs to pastebin services. All you need is to enter settings and start an upload:\n Enter Elementum settings, open Advanced tab, browse to Logging section and you can see there are Upload options.  Now you get an url of a paste. Write it down and share in your issues!  Easy enough?!\nHard one Still not so hard, but, sadly, more manual and needs some effords, at least, for the first time. So you can follow the manual here: https://kodi.wiki/view/Log_file/Easy\nShortly, you can install log uploader plugin, and run it to get pastebin link of an uploaded log file. Or you can find your log location here: https://kodi.wiki/view/Log_file/Advanced#Location and use it manually.\n"
},
{
	"uri": "/context/",
	"title": "Context addon",
	"tags": [],
	"description": "",
	"content": "About Context addon adds context menu items, when you open it on movies, or TV shows in Kodi.\nJust open the menu and click \u0026ldquo;Play\u0026rdquo; and item will be searched by Elementum. Does not matter which Scraper was used for that item, is it local item, or virtual item, or added by another plugin. If Kodi treats item as Movie or Episode - you can play it!\n"
},
{
	"uri": "/getting-started/updating/",
	"title": "Updating",
	"tags": [],
	"description": "",
	"content": "Update instructions.\nHow it works Elementum has a self-hosted virtual Kodi repository. What it means?\n When installed, Elementum adds a repository to Kodi. In some cases it is added, but not enabled, so you can manually enable it like any other addon. Repository update address points to the Elementum addon, so it you Elementum cannot start - repository is not working. This was made in that way to be able to change repository source in the code, in case github in inaccessible, or something. Plugin knows which OS architecture it needs, so it\u0026rsquo;s downloading only that architecture zip file. Repository contains the Addon itself, Burst addon, Context addon, you can install or update any of them.   Please, don\u0026rsquo;t use third-party repositories to install or update the addon, unless you know they are providing you with the universal package, which contains all the architectures.\n So, if you addon works fine - you can simply update the addon as usually, or leave it to Kodi. If not, then you should re-download addon from Downloads and re-install from zip. No need to remove the addon before installing.\n"
},
{
	"uri": "/donate/",
	"title": "Donate",
	"tags": [],
	"description": "",
	"content": "Donations Elementum is free to use, without any payments and fees, but you can donate, to support further development and add functionality to the addon and surrounding projects.\nYandex  Paypal  Flattr   Bitcoin  BTC: 1AVMRYfBUVcDoUNi3WZqPtaigbFtkHEQvP BCH: qp5pt57335k44mpq9m55ajyz2err8kfv4cn58sxvt8 Electrum address: bc1qfaea67lv4e8w97fx3crmdtxryn8pkc47mf7gav  "
},
{
	"uri": "/",
	"title": "Elementum Documentation",
	"tags": [],
	"description": "",
	"content": "Elementum Kodi addon Elementum addon  is an addon for Kodi, that manages your virtual library, syncs with your Trakt account . Author does not take any responsibility for how users use this software!\nAddons plugin.video.elementum and script.elementum.burst are not supported!  Do not expect any support, help and other things like that. Source is open, so you can fork everything.  Elementum Downloads  It is always better to use \u0026ldquo;All-on-one\u0026rdquo; zip file to install, it includes all the platforms!\n  .platform-os { } .platform-name { } .platform-assets { } .platform-asset { }  \nUniversal  All-in-one   \nClient  Client   \nAndroid  arm arm64 x64 x86   \nOSx  x64 x86   \nLinux  arm64 armv6 armv7 x64 x86   \nWindows  x64 x86    Burst Downloads  .platform-os { } .platform-name { } .platform-assets { } .platform-asset { }  \nUniversal  All-in-one    Context Helper Downloads  .platform-os { } .platform-name { } .platform-assets { } .platform-asset { }  \nUniversal  All-in-one    Contribute to this documentation Feel free to update this content, just click the Edit this page link displayed on top right of each page, and pullrequest it Your modification will be deployed automatically when merged. "
},
{
	"uri": "/_footer/",
	"title": "footer",
	"tags": [],
	"description": "",
	"content": "Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n"
},
{
	"uri": "/_header/",
	"title": "header",
	"tags": [],
	"description": "",
	"content": "Elementum Documentation\n"
},
{
	"uri": "/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/credits/",
	"title": "Credits",
	"tags": [],
	"description": "contributors and packages used by Elementum",
	"content": "github contributors .ghContributors{ display:flex; flex-flow: wrap; align-content: flex-start } .ghContributors  div{ width: 50% ; display: inline-flex; margin-bottom: 5px; } .ghContributors  div label{ padding-left: 4px ; } .ghContributors  div span{ font-size: x-small; padding-left: 4px ; }   @scakemyer 411 commits   @elgatito 405 commits   @steeve 90 commits   @assapir 39 commits   @i96751414 23 commits   @KillerJoeBR 14 commits   @ramiro 14 commits   @penzinho 14 commits   @m4xc4v413r4 13 commits   @Greenbaburu 12 commits   @jellespijker 12 commits   @muzena 12 commits   @roliverosc 10 commits   @zorg1977 9 commits   @lrrosa 6 commits   @Filosofos 5 commits   @abuisine 4 commits   @razer1s 4 commits   @johnnyslt 4 commits   @Lam4hound 3 commits   @dmartinpro 3 commits   @sonics007 2 commits   @trisk 1 commits   @benjamintillman 1 commits   @candrews 1 commits   @iz8mbw 1 commits   @MrDini123 1 commits   @MrLegendary 1 commits   @Nemiroff 1 commits   @susobaco 1 commits   @Pilson66 1 commits   @achaw 1 commits   @guidosarducci 1 commits   @a1ex4 1 commits   @tobiasvandriessel 1 commits   Other contributors  @scakemyer Quasar development   Packages and libraries  Torrent - Torrent library, used in plugin. Quasar - Kodi plugin, forked to become Elementum.  Tooling  Hugo    "
},
{
	"uri": "/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]